<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- 
		log4j
		프로그램 작동시, 로그를 남기기위한 자바기반 오픈소스 로깅 라이브러리
		-> 해킹이 가능하다는 이슈가 잠깐 있었지만 수정되었음.
		로그의 레벨을 지정하여 지정한 레벨이상의 로그정보만 기록하는 방식
		System.out.println문보다 속도나 성능면에 최적화되어있다.
	 -->


	<!-- Appenders -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<!-- 
			ConsoleAppender : 콘솔창에 에러메시지를 출력해주는 녀석
			FileAppender 	: 파일에 출력하는 녀석
		 -->
	
		<param name="threshold" value="INFO" />
		<!-- 
			로그 레벨 설정
			FATAL > ERROR > WARN > INFO > DEBUGGER > TRACE
			FATAL : 애플리케이션이 동작이 불가능할 정도의 에러 발생 시, 로그를 찍어줌
			ERROR : 요청처리 중 에러발생 시, 로그를 찍어줌
			WARN  : 심각한 문제는 아니지만, 추후 에러발생 가능성을 알려주는 로그
			INFO  : 일반 정보성 메세지를 나타냄
			DEBUGGER : 개발시 디버그 용도로 로그를 찍어줌
			TRACE : 1.2.12에서 추가됨 (DEBUGGER에서 좀 더 상세하게 표현하게끔 바뀜)
			
			개발할때는 DEBUGGER OR TRACE로 테스트해보다가 운영환경으로 넘어가면 INFO모드로 바꿔서 사용하게된다.
		 -->
		
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<!-- layout : 틀(출력하고자하는 패턴을 넣을 수 있는 틀) -->
<!-- 			<param name="ConversionPattern" value="%-5p: %c - %m%n" /> -->
				<!-- 가장 기본적인 패턴 형식 -->
				
				<param name="ConversionPattern" value="[%d{HH:mm:ss.SSS}] %-5p %C{1}.%M(%F:%L) - %m%n"/>
				<!-- 자주사용되는 패턴으로, 굳이 외울필요 없다. -->
				<!-- 
					%p : 우선순위 레벨, %c : 호출클래스명{1} %m은 메소드, %F은 로그발생한 파일명 출력 라인수
				 -->
		</layout>
	</appender>
	
	
   <!-- 
		DailyRollingFileAppender ?
				일정기간 단위로 로그파일을 생성하고, 기록하도록 도와주는 클래스	
	-->
	<appender name="dailyLog" class="org.apache.log4j.DailyRollingFileAppender">
		
		<param name="threshold" value="INFO"/>
		<!--  logger안에 appender ref로 dailyLog객체를 사용시, level정보가 없다면 threshold에 설정한 정보를 사용 -->
		
		<param name="Append" value="true" />
		<!--  파일 이어쓰기 여부 true면 이어쓰고, false면 새로생성한다. -->
		
		<param name="File" value="/logs/kh.log" />
		<!-- new File("/logs/kh/log");가 실행되는 것과 같다.
			 폴더에 접근권한(생성권한)이 없는 경우에 에러발생할 수 있다. -->
		
		<param name="DatePattern" value="'.'yyyyMMdd" />
		<!-- 
			매일 자정에 로그파일을 바꿔주는 명령어
			yyyyMM : 매달 바꿔주는 명령어
			yyyyww : 매주 바꿔주는 명령어
			yyyyMMdd : 매일 자정에 로그파일을 바꿔주는 명령어
			yyyyMMdd a : 자정과 정오에 로그파일을 바꿔주는 명령어
			...등 시간단위, 분단위 도 가능함.
		 -->
		 
		 <param class="org.apache.log4j.PatternLayout">
		 	<layout class="org.apache.log4j.PatternLayout">
			<!-- layout : 틀(출력하고자하는 패턴을 넣을 수 있는 틀) -->
<!-- 			<param name="ConversionPattern" value="%-5p: %c - %m%n" /> -->
				<!-- 가장 기본적인 패턴 형식 -->
				
				<param name="ConversionPattern" value="[%d{HH:mm:ss.SSS}] - %m%n"/>
				<!-- 자주사용되는 패턴으로, 굳이 외울필요 없다. -->
				<!-- 
					%p : 우선순위 레벨, %c : 호출클래스명{1} %m은 메소드, %F은 로그발생한 파일명 출력 라인수
				 -->
		</layout>
		 </param>
	</appender>
	
	
	
	<!-- Application Loggers -->
	<logger name="com.kh.spring.common.LoggingInterceptor">
		<level value="info" />
		
	</logger>
	
<!-- 	<logger name="boardMapper"> -->
<!-- 		<level value="info" /> -->
<!-- 	</logger> -->
	
<!-- 	<logger name="memberMapper"> -->
<!-- 		<level value="info" /> -->
<!-- 	</logger> -->
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>

	<!-- Root Logger -->
	<root>
		<priority value="info" />
		<!-- info로 변경해주면, 상세한 로그정보까지 볼 수 있음 -->
		<appender-ref ref="console" />
		<appender-ref ref="dailyLog" />
	</root>
	
</log4j:configuration>
